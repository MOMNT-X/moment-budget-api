generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  password           String?
  income             Float?
  createdAt          DateTime      @default(now())
  username           String        @unique
  firstName          String?
  lastName           String?
  accountNumber      String?
  bankCode           String?
  bankName           String?
  paystackSubaccount String?
  // OAuth fields
  oauthProvider      String?
  oauthProviderId    String?
  
  bills              Bill[]        @relation("UserBills")
  budgets            Budget[]
  expenses           Expense[]
  transactions       Transaction[]
  wallet             Wallet?
  budgetAlerts       BudgetAlert[]
  beneficiaries      Beneficiary[]
  financialGoals     FinancialGoal[]
  recurringExpenses  RecurringExpense[]
  BudgetCategory     BudgetCategory[]
}

model Wallet {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  balance                Float    @default(0)
  updatedAt              DateTime @updatedAt
  currency               String   @default("NGN")
  paystackAccountNumber  String?  @unique
  paystackBankName       String?
  paystackCustomerCode   String?
  paystackRecipientCode  String?
  paystackBusinessName   String?
  paystackSubaccountCode String   @default("TEMP_CODE")
  user                   User     @relation(fields: [userId], references: [id])
}

model BudgetCategory {
  id           String        @id @default(cuid())
  name         String        @unique
  bills        Bill[]        @relation("CategoryBills")
  userId       String?
  isDefault Boolean  @default(false)
  user         User?         @relation(fields: [userId], references: [id])
  budgets           Budget[]
  expenses          Expense[]
  transactions      Transaction[]
  financialGoals    FinancialGoal[]
  recurringExpenses RecurringExpense[]
  
  @@unique([name, userId])
}

model Budget {
  id          String               @id @default(cuid())
  userId      String
  categoryId  String
  amount      Float
  startDate   DateTime
  endDate     DateTime
  recurring   Boolean              @default(false)
  frequency   RecurrenceFrequency?
  nextRunDate DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now()) @updatedAt
  
  category    BudgetCategory       @relation(fields: [categoryId], references: [id])
  user        User                 @relation(fields: [userId], references: [id])
  alerts      BudgetAlert[]
}

model Expense {
  id          String         @id @default(cuid())
  userId      String
  amount      Float
  description String?
  categoryId  String
  timestamp   DateTime       @default(now())
  
  category    BudgetCategory @relation(fields: [categoryId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Float
  description String?
  categoryId  String?
  type        TransactionType
  timestamp   DateTime        @default(now())
  metadata    Json?
  reference   String          @unique
  status      String          @default("pending")
  
  category    BudgetCategory? @relation(fields: [categoryId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
}

model Bill {
  id                      String         @id @default(uuid())
  userId                  String
  categoryId              String
  amount                  Int
  description             String
  dueDate                 DateTime
  billStatus              BillStatus     @default(PENDING)
  autoPay                 Boolean        @default(false)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  reference               String         @unique
  paidAt                  DateTime?
  currency                String         @default("NGN")
  recipientAccountNumber  String?
  recipientAccountName    String?
  recipientBankCode       String?
  recipientBankName       String?
  paystackRecipientCode   String?
  beneficiaryId           String?

  category                BudgetCategory @relation("CategoryBills", fields: [categoryId], references: [id])
  user                    User           @relation("UserBills", fields: [userId], references: [id])
  beneficiary             Beneficiary?   @relation(fields: [beneficiaryId], references: [id])
}

model BudgetAlert {
  id          String   @id @default(cuid())
  budgetId    String
  userId      String
  threshold   Int
  percentUsed Float
  message     String
  createdAt   DateTime @default(now())

  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Beneficiary {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  accountNumber         String
  bankCode              String
  bankName              String
  paystackRecipientCode String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bills                 Bill[]

  @@unique([userId, accountNumber, bankCode])
}

model FinancialGoal {
  id          String         @id @default(cuid())
  userId      String
  name        String
  targetAmount Float
  currentAmount Float        @default(0)
  deadline    DateTime?
  categoryId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      GoalStatus     @default(ACTIVE)

  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    BudgetCategory? @relation(fields: [categoryId], references: [id])
}

model RecurringExpense {
  id          String               @id @default(cuid())
  userId      String
  amount      Float
  description String
  categoryId  String
  frequency   RecurrenceFrequency
  nextDueDate DateTime
  startDate   DateTime             @default(now())
  endDate     DateTime?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    BudgetCategory       @relation(fields: [categoryId], references: [id])
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  WITHDRAWAL
  DEPOSIT
}

enum BillStatus {
  PENDING
  PAID
  OVERDUE
  FAILED
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}